
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Promos` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Promos
 * 
 */
export type PromosModel = runtime.Types.Result.DefaultSelection<Prisma.$PromosPayload>

export type AggregatePromos = {
  _count: PromosCountAggregateOutputType | null
  _avg: PromosAvgAggregateOutputType | null
  _sum: PromosSumAggregateOutputType | null
  _min: PromosMinAggregateOutputType | null
  _max: PromosMaxAggregateOutputType | null
}

export type PromosAvgAggregateOutputType = {
  discount: number | null
}

export type PromosSumAggregateOutputType = {
  discount: number | null
}

export type PromosMinAggregateOutputType = {
  id: string | null
  name: string | null
  discount: number | null
}

export type PromosMaxAggregateOutputType = {
  id: string | null
  name: string | null
  discount: number | null
}

export type PromosCountAggregateOutputType = {
  id: number
  name: number
  discount: number
  _all: number
}


export type PromosAvgAggregateInputType = {
  discount?: true
}

export type PromosSumAggregateInputType = {
  discount?: true
}

export type PromosMinAggregateInputType = {
  id?: true
  name?: true
  discount?: true
}

export type PromosMaxAggregateInputType = {
  id?: true
  name?: true
  discount?: true
}

export type PromosCountAggregateInputType = {
  id?: true
  name?: true
  discount?: true
  _all?: true
}

export type PromosAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Promos to aggregate.
   */
  where?: Prisma.PromosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Promos to fetch.
   */
  orderBy?: Prisma.PromosOrderByWithRelationInput | Prisma.PromosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PromosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Promos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Promos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Promos
  **/
  _count?: true | PromosCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PromosAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PromosSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PromosMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PromosMaxAggregateInputType
}

export type GetPromosAggregateType<T extends PromosAggregateArgs> = {
      [P in keyof T & keyof AggregatePromos]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePromos[P]>
    : Prisma.GetScalarType<T[P], AggregatePromos[P]>
}




export type PromosGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PromosWhereInput
  orderBy?: Prisma.PromosOrderByWithAggregationInput | Prisma.PromosOrderByWithAggregationInput[]
  by: Prisma.PromosScalarFieldEnum[] | Prisma.PromosScalarFieldEnum
  having?: Prisma.PromosScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PromosCountAggregateInputType | true
  _avg?: PromosAvgAggregateInputType
  _sum?: PromosSumAggregateInputType
  _min?: PromosMinAggregateInputType
  _max?: PromosMaxAggregateInputType
}

export type PromosGroupByOutputType = {
  id: string
  name: string
  discount: number
  _count: PromosCountAggregateOutputType | null
  _avg: PromosAvgAggregateOutputType | null
  _sum: PromosSumAggregateOutputType | null
  _min: PromosMinAggregateOutputType | null
  _max: PromosMaxAggregateOutputType | null
}

type GetPromosGroupByPayload<T extends PromosGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PromosGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PromosGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PromosGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PromosGroupByOutputType[P]>
      }
    >
  >



export type PromosWhereInput = {
  AND?: Prisma.PromosWhereInput | Prisma.PromosWhereInput[]
  OR?: Prisma.PromosWhereInput[]
  NOT?: Prisma.PromosWhereInput | Prisma.PromosWhereInput[]
  id?: Prisma.StringFilter<"Promos"> | string
  name?: Prisma.StringFilter<"Promos"> | string
  discount?: Prisma.FloatFilter<"Promos"> | number
}

export type PromosOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  discount?: Prisma.SortOrder
}

export type PromosWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.PromosWhereInput | Prisma.PromosWhereInput[]
  OR?: Prisma.PromosWhereInput[]
  NOT?: Prisma.PromosWhereInput | Prisma.PromosWhereInput[]
  discount?: Prisma.FloatFilter<"Promos"> | number
}, "id" | "name">

export type PromosOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  discount?: Prisma.SortOrder
  _count?: Prisma.PromosCountOrderByAggregateInput
  _avg?: Prisma.PromosAvgOrderByAggregateInput
  _max?: Prisma.PromosMaxOrderByAggregateInput
  _min?: Prisma.PromosMinOrderByAggregateInput
  _sum?: Prisma.PromosSumOrderByAggregateInput
}

export type PromosScalarWhereWithAggregatesInput = {
  AND?: Prisma.PromosScalarWhereWithAggregatesInput | Prisma.PromosScalarWhereWithAggregatesInput[]
  OR?: Prisma.PromosScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PromosScalarWhereWithAggregatesInput | Prisma.PromosScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Promos"> | string
  name?: Prisma.StringWithAggregatesFilter<"Promos"> | string
  discount?: Prisma.FloatWithAggregatesFilter<"Promos"> | number
}

export type PromosCreateInput = {
  id?: string
  name: string
  discount: number
}

export type PromosUncheckedCreateInput = {
  id?: string
  name: string
  discount: number
}

export type PromosUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  discount?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type PromosUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  discount?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type PromosCreateManyInput = {
  id?: string
  name: string
  discount: number
}

export type PromosUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  discount?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type PromosUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  discount?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type PromosCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  discount?: Prisma.SortOrder
}

export type PromosAvgOrderByAggregateInput = {
  discount?: Prisma.SortOrder
}

export type PromosMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  discount?: Prisma.SortOrder
}

export type PromosMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  discount?: Prisma.SortOrder
}

export type PromosSumOrderByAggregateInput = {
  discount?: Prisma.SortOrder
}



export type PromosSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  discount?: boolean
}, ExtArgs["result"]["promos"]>

export type PromosSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  discount?: boolean
}, ExtArgs["result"]["promos"]>

export type PromosSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  discount?: boolean
}, ExtArgs["result"]["promos"]>

export type PromosSelectScalar = {
  id?: boolean
  name?: boolean
  discount?: boolean
}

export type PromosOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "discount", ExtArgs["result"]["promos"]>

export type $PromosPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Promos"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    discount: number
  }, ExtArgs["result"]["promos"]>
  composites: {}
}

export type PromosGetPayload<S extends boolean | null | undefined | PromosDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PromosPayload, S>

export type PromosCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PromosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PromosCountAggregateInputType | true
  }

export interface PromosDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Promos'], meta: { name: 'Promos' } }
  /**
   * Find zero or one Promos that matches the filter.
   * @param {PromosFindUniqueArgs} args - Arguments to find a Promos
   * @example
   * // Get one Promos
   * const promos = await prisma.promos.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PromosFindUniqueArgs>(args: Prisma.SelectSubset<T, PromosFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PromosClient<runtime.Types.Result.GetResult<Prisma.$PromosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Promos that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PromosFindUniqueOrThrowArgs} args - Arguments to find a Promos
   * @example
   * // Get one Promos
   * const promos = await prisma.promos.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PromosFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PromosFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PromosClient<runtime.Types.Result.GetResult<Prisma.$PromosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Promos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromosFindFirstArgs} args - Arguments to find a Promos
   * @example
   * // Get one Promos
   * const promos = await prisma.promos.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PromosFindFirstArgs>(args?: Prisma.SelectSubset<T, PromosFindFirstArgs<ExtArgs>>): Prisma.Prisma__PromosClient<runtime.Types.Result.GetResult<Prisma.$PromosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Promos that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromosFindFirstOrThrowArgs} args - Arguments to find a Promos
   * @example
   * // Get one Promos
   * const promos = await prisma.promos.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PromosFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PromosFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PromosClient<runtime.Types.Result.GetResult<Prisma.$PromosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Promos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromosFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Promos
   * const promos = await prisma.promos.findMany()
   * 
   * // Get first 10 Promos
   * const promos = await prisma.promos.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const promosWithIdOnly = await prisma.promos.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PromosFindManyArgs>(args?: Prisma.SelectSubset<T, PromosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PromosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Promos.
   * @param {PromosCreateArgs} args - Arguments to create a Promos.
   * @example
   * // Create one Promos
   * const Promos = await prisma.promos.create({
   *   data: {
   *     // ... data to create a Promos
   *   }
   * })
   * 
   */
  create<T extends PromosCreateArgs>(args: Prisma.SelectSubset<T, PromosCreateArgs<ExtArgs>>): Prisma.Prisma__PromosClient<runtime.Types.Result.GetResult<Prisma.$PromosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Promos.
   * @param {PromosCreateManyArgs} args - Arguments to create many Promos.
   * @example
   * // Create many Promos
   * const promos = await prisma.promos.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PromosCreateManyArgs>(args?: Prisma.SelectSubset<T, PromosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Promos and returns the data saved in the database.
   * @param {PromosCreateManyAndReturnArgs} args - Arguments to create many Promos.
   * @example
   * // Create many Promos
   * const promos = await prisma.promos.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Promos and only return the `id`
   * const promosWithIdOnly = await prisma.promos.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PromosCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PromosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PromosPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Promos.
   * @param {PromosDeleteArgs} args - Arguments to delete one Promos.
   * @example
   * // Delete one Promos
   * const Promos = await prisma.promos.delete({
   *   where: {
   *     // ... filter to delete one Promos
   *   }
   * })
   * 
   */
  delete<T extends PromosDeleteArgs>(args: Prisma.SelectSubset<T, PromosDeleteArgs<ExtArgs>>): Prisma.Prisma__PromosClient<runtime.Types.Result.GetResult<Prisma.$PromosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Promos.
   * @param {PromosUpdateArgs} args - Arguments to update one Promos.
   * @example
   * // Update one Promos
   * const promos = await prisma.promos.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PromosUpdateArgs>(args: Prisma.SelectSubset<T, PromosUpdateArgs<ExtArgs>>): Prisma.Prisma__PromosClient<runtime.Types.Result.GetResult<Prisma.$PromosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Promos.
   * @param {PromosDeleteManyArgs} args - Arguments to filter Promos to delete.
   * @example
   * // Delete a few Promos
   * const { count } = await prisma.promos.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PromosDeleteManyArgs>(args?: Prisma.SelectSubset<T, PromosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Promos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromosUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Promos
   * const promos = await prisma.promos.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PromosUpdateManyArgs>(args: Prisma.SelectSubset<T, PromosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Promos and returns the data updated in the database.
   * @param {PromosUpdateManyAndReturnArgs} args - Arguments to update many Promos.
   * @example
   * // Update many Promos
   * const promos = await prisma.promos.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Promos and only return the `id`
   * const promosWithIdOnly = await prisma.promos.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PromosUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PromosUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PromosPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Promos.
   * @param {PromosUpsertArgs} args - Arguments to update or create a Promos.
   * @example
   * // Update or create a Promos
   * const promos = await prisma.promos.upsert({
   *   create: {
   *     // ... data to create a Promos
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Promos we want to update
   *   }
   * })
   */
  upsert<T extends PromosUpsertArgs>(args: Prisma.SelectSubset<T, PromosUpsertArgs<ExtArgs>>): Prisma.Prisma__PromosClient<runtime.Types.Result.GetResult<Prisma.$PromosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Promos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromosCountArgs} args - Arguments to filter Promos to count.
   * @example
   * // Count the number of Promos
   * const count = await prisma.promos.count({
   *   where: {
   *     // ... the filter for the Promos we want to count
   *   }
   * })
  **/
  count<T extends PromosCountArgs>(
    args?: Prisma.Subset<T, PromosCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PromosCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Promos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PromosAggregateArgs>(args: Prisma.Subset<T, PromosAggregateArgs>): Prisma.PrismaPromise<GetPromosAggregateType<T>>

  /**
   * Group by Promos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromosGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PromosGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PromosGroupByArgs['orderBy'] }
      : { orderBy?: PromosGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PromosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Promos model
 */
readonly fields: PromosFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Promos.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PromosClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Promos model
 */
export interface PromosFieldRefs {
  readonly id: Prisma.FieldRef<"Promos", 'String'>
  readonly name: Prisma.FieldRef<"Promos", 'String'>
  readonly discount: Prisma.FieldRef<"Promos", 'Float'>
}
    

// Custom InputTypes
/**
 * Promos findUnique
 */
export type PromosFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Promos
   */
  select?: Prisma.PromosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Promos
   */
  omit?: Prisma.PromosOmit<ExtArgs> | null
  /**
   * Filter, which Promos to fetch.
   */
  where: Prisma.PromosWhereUniqueInput
}

/**
 * Promos findUniqueOrThrow
 */
export type PromosFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Promos
   */
  select?: Prisma.PromosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Promos
   */
  omit?: Prisma.PromosOmit<ExtArgs> | null
  /**
   * Filter, which Promos to fetch.
   */
  where: Prisma.PromosWhereUniqueInput
}

/**
 * Promos findFirst
 */
export type PromosFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Promos
   */
  select?: Prisma.PromosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Promos
   */
  omit?: Prisma.PromosOmit<ExtArgs> | null
  /**
   * Filter, which Promos to fetch.
   */
  where?: Prisma.PromosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Promos to fetch.
   */
  orderBy?: Prisma.PromosOrderByWithRelationInput | Prisma.PromosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Promos.
   */
  cursor?: Prisma.PromosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Promos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Promos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Promos.
   */
  distinct?: Prisma.PromosScalarFieldEnum | Prisma.PromosScalarFieldEnum[]
}

/**
 * Promos findFirstOrThrow
 */
export type PromosFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Promos
   */
  select?: Prisma.PromosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Promos
   */
  omit?: Prisma.PromosOmit<ExtArgs> | null
  /**
   * Filter, which Promos to fetch.
   */
  where?: Prisma.PromosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Promos to fetch.
   */
  orderBy?: Prisma.PromosOrderByWithRelationInput | Prisma.PromosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Promos.
   */
  cursor?: Prisma.PromosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Promos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Promos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Promos.
   */
  distinct?: Prisma.PromosScalarFieldEnum | Prisma.PromosScalarFieldEnum[]
}

/**
 * Promos findMany
 */
export type PromosFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Promos
   */
  select?: Prisma.PromosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Promos
   */
  omit?: Prisma.PromosOmit<ExtArgs> | null
  /**
   * Filter, which Promos to fetch.
   */
  where?: Prisma.PromosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Promos to fetch.
   */
  orderBy?: Prisma.PromosOrderByWithRelationInput | Prisma.PromosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Promos.
   */
  cursor?: Prisma.PromosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Promos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Promos.
   */
  skip?: number
  distinct?: Prisma.PromosScalarFieldEnum | Prisma.PromosScalarFieldEnum[]
}

/**
 * Promos create
 */
export type PromosCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Promos
   */
  select?: Prisma.PromosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Promos
   */
  omit?: Prisma.PromosOmit<ExtArgs> | null
  /**
   * The data needed to create a Promos.
   */
  data: Prisma.XOR<Prisma.PromosCreateInput, Prisma.PromosUncheckedCreateInput>
}

/**
 * Promos createMany
 */
export type PromosCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Promos.
   */
  data: Prisma.PromosCreateManyInput | Prisma.PromosCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Promos createManyAndReturn
 */
export type PromosCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Promos
   */
  select?: Prisma.PromosSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Promos
   */
  omit?: Prisma.PromosOmit<ExtArgs> | null
  /**
   * The data used to create many Promos.
   */
  data: Prisma.PromosCreateManyInput | Prisma.PromosCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Promos update
 */
export type PromosUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Promos
   */
  select?: Prisma.PromosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Promos
   */
  omit?: Prisma.PromosOmit<ExtArgs> | null
  /**
   * The data needed to update a Promos.
   */
  data: Prisma.XOR<Prisma.PromosUpdateInput, Prisma.PromosUncheckedUpdateInput>
  /**
   * Choose, which Promos to update.
   */
  where: Prisma.PromosWhereUniqueInput
}

/**
 * Promos updateMany
 */
export type PromosUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Promos.
   */
  data: Prisma.XOR<Prisma.PromosUpdateManyMutationInput, Prisma.PromosUncheckedUpdateManyInput>
  /**
   * Filter which Promos to update
   */
  where?: Prisma.PromosWhereInput
  /**
   * Limit how many Promos to update.
   */
  limit?: number
}

/**
 * Promos updateManyAndReturn
 */
export type PromosUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Promos
   */
  select?: Prisma.PromosSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Promos
   */
  omit?: Prisma.PromosOmit<ExtArgs> | null
  /**
   * The data used to update Promos.
   */
  data: Prisma.XOR<Prisma.PromosUpdateManyMutationInput, Prisma.PromosUncheckedUpdateManyInput>
  /**
   * Filter which Promos to update
   */
  where?: Prisma.PromosWhereInput
  /**
   * Limit how many Promos to update.
   */
  limit?: number
}

/**
 * Promos upsert
 */
export type PromosUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Promos
   */
  select?: Prisma.PromosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Promos
   */
  omit?: Prisma.PromosOmit<ExtArgs> | null
  /**
   * The filter to search for the Promos to update in case it exists.
   */
  where: Prisma.PromosWhereUniqueInput
  /**
   * In case the Promos found by the `where` argument doesn't exist, create a new Promos with this data.
   */
  create: Prisma.XOR<Prisma.PromosCreateInput, Prisma.PromosUncheckedCreateInput>
  /**
   * In case the Promos was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PromosUpdateInput, Prisma.PromosUncheckedUpdateInput>
}

/**
 * Promos delete
 */
export type PromosDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Promos
   */
  select?: Prisma.PromosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Promos
   */
  omit?: Prisma.PromosOmit<ExtArgs> | null
  /**
   * Filter which Promos to delete.
   */
  where: Prisma.PromosWhereUniqueInput
}

/**
 * Promos deleteMany
 */
export type PromosDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Promos to delete
   */
  where?: Prisma.PromosWhereInput
  /**
   * Limit how many Promos to delete.
   */
  limit?: number
}

/**
 * Promos without action
 */
export type PromosDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Promos
   */
  select?: Prisma.PromosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Promos
   */
  omit?: Prisma.PromosOmit<ExtArgs> | null
}
