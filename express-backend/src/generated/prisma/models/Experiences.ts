
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Experiences` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Experiences
 * 
 */
export type ExperiencesModel = runtime.Types.Result.DefaultSelection<Prisma.$ExperiencesPayload>

export type AggregateExperiences = {
  _count: ExperiencesCountAggregateOutputType | null
  _avg: ExperiencesAvgAggregateOutputType | null
  _sum: ExperiencesSumAggregateOutputType | null
  _min: ExperiencesMinAggregateOutputType | null
  _max: ExperiencesMaxAggregateOutputType | null
}

export type ExperiencesAvgAggregateOutputType = {
  price: number | null
}

export type ExperiencesSumAggregateOutputType = {
  price: number | null
}

export type ExperiencesMinAggregateOutputType = {
  id: string | null
  destination: string | null
  location: string | null
  description: string | null
  price: number | null
  image: string | null
}

export type ExperiencesMaxAggregateOutputType = {
  id: string | null
  destination: string | null
  location: string | null
  description: string | null
  price: number | null
  image: string | null
}

export type ExperiencesCountAggregateOutputType = {
  id: number
  destination: number
  location: number
  description: number
  price: number
  image: number
  slot: number
  _all: number
}


export type ExperiencesAvgAggregateInputType = {
  price?: true
}

export type ExperiencesSumAggregateInputType = {
  price?: true
}

export type ExperiencesMinAggregateInputType = {
  id?: true
  destination?: true
  location?: true
  description?: true
  price?: true
  image?: true
}

export type ExperiencesMaxAggregateInputType = {
  id?: true
  destination?: true
  location?: true
  description?: true
  price?: true
  image?: true
}

export type ExperiencesCountAggregateInputType = {
  id?: true
  destination?: true
  location?: true
  description?: true
  price?: true
  image?: true
  slot?: true
  _all?: true
}

export type ExperiencesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Experiences to aggregate.
   */
  where?: Prisma.ExperiencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Experiences to fetch.
   */
  orderBy?: Prisma.ExperiencesOrderByWithRelationInput | Prisma.ExperiencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExperiencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Experiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Experiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Experiences
  **/
  _count?: true | ExperiencesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ExperiencesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ExperiencesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExperiencesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExperiencesMaxAggregateInputType
}

export type GetExperiencesAggregateType<T extends ExperiencesAggregateArgs> = {
      [P in keyof T & keyof AggregateExperiences]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExperiences[P]>
    : Prisma.GetScalarType<T[P], AggregateExperiences[P]>
}




export type ExperiencesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExperiencesWhereInput
  orderBy?: Prisma.ExperiencesOrderByWithAggregationInput | Prisma.ExperiencesOrderByWithAggregationInput[]
  by: Prisma.ExperiencesScalarFieldEnum[] | Prisma.ExperiencesScalarFieldEnum
  having?: Prisma.ExperiencesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExperiencesCountAggregateInputType | true
  _avg?: ExperiencesAvgAggregateInputType
  _sum?: ExperiencesSumAggregateInputType
  _min?: ExperiencesMinAggregateInputType
  _max?: ExperiencesMaxAggregateInputType
}

export type ExperiencesGroupByOutputType = {
  id: string
  destination: string
  location: string
  description: string
  price: number
  image: string
  slot: runtime.JsonValue
  _count: ExperiencesCountAggregateOutputType | null
  _avg: ExperiencesAvgAggregateOutputType | null
  _sum: ExperiencesSumAggregateOutputType | null
  _min: ExperiencesMinAggregateOutputType | null
  _max: ExperiencesMaxAggregateOutputType | null
}

type GetExperiencesGroupByPayload<T extends ExperiencesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExperiencesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExperiencesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExperiencesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExperiencesGroupByOutputType[P]>
      }
    >
  >



export type ExperiencesWhereInput = {
  AND?: Prisma.ExperiencesWhereInput | Prisma.ExperiencesWhereInput[]
  OR?: Prisma.ExperiencesWhereInput[]
  NOT?: Prisma.ExperiencesWhereInput | Prisma.ExperiencesWhereInput[]
  id?: Prisma.StringFilter<"Experiences"> | string
  destination?: Prisma.StringFilter<"Experiences"> | string
  location?: Prisma.StringFilter<"Experiences"> | string
  description?: Prisma.StringFilter<"Experiences"> | string
  price?: Prisma.FloatFilter<"Experiences"> | number
  image?: Prisma.StringFilter<"Experiences"> | string
  slot?: Prisma.JsonFilter<"Experiences">
  bookings?: Prisma.BookingsListRelationFilter
}

export type ExperiencesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  destination?: Prisma.SortOrder
  location?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  image?: Prisma.SortOrder
  slot?: Prisma.SortOrder
  bookings?: Prisma.BookingsOrderByRelationAggregateInput
}

export type ExperiencesWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ExperiencesWhereInput | Prisma.ExperiencesWhereInput[]
  OR?: Prisma.ExperiencesWhereInput[]
  NOT?: Prisma.ExperiencesWhereInput | Prisma.ExperiencesWhereInput[]
  destination?: Prisma.StringFilter<"Experiences"> | string
  location?: Prisma.StringFilter<"Experiences"> | string
  description?: Prisma.StringFilter<"Experiences"> | string
  price?: Prisma.FloatFilter<"Experiences"> | number
  image?: Prisma.StringFilter<"Experiences"> | string
  slot?: Prisma.JsonFilter<"Experiences">
  bookings?: Prisma.BookingsListRelationFilter
}, "id">

export type ExperiencesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  destination?: Prisma.SortOrder
  location?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  image?: Prisma.SortOrder
  slot?: Prisma.SortOrder
  _count?: Prisma.ExperiencesCountOrderByAggregateInput
  _avg?: Prisma.ExperiencesAvgOrderByAggregateInput
  _max?: Prisma.ExperiencesMaxOrderByAggregateInput
  _min?: Prisma.ExperiencesMinOrderByAggregateInput
  _sum?: Prisma.ExperiencesSumOrderByAggregateInput
}

export type ExperiencesScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExperiencesScalarWhereWithAggregatesInput | Prisma.ExperiencesScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExperiencesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExperiencesScalarWhereWithAggregatesInput | Prisma.ExperiencesScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Experiences"> | string
  destination?: Prisma.StringWithAggregatesFilter<"Experiences"> | string
  location?: Prisma.StringWithAggregatesFilter<"Experiences"> | string
  description?: Prisma.StringWithAggregatesFilter<"Experiences"> | string
  price?: Prisma.FloatWithAggregatesFilter<"Experiences"> | number
  image?: Prisma.StringWithAggregatesFilter<"Experiences"> | string
  slot?: Prisma.JsonWithAggregatesFilter<"Experiences">
}

export type ExperiencesCreateInput = {
  id?: string
  destination: string
  location: string
  description: string
  price: number
  image: string
  slot: Prisma.JsonNullValueInput | runtime.InputJsonValue
  bookings?: Prisma.BookingsCreateNestedManyWithoutExperiencesInput
}

export type ExperiencesUncheckedCreateInput = {
  id?: string
  destination: string
  location: string
  description: string
  price: number
  image: string
  slot: Prisma.JsonNullValueInput | runtime.InputJsonValue
  bookings?: Prisma.BookingsUncheckedCreateNestedManyWithoutExperiencesInput
}

export type ExperiencesUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  image?: Prisma.StringFieldUpdateOperationsInput | string
  slot?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  bookings?: Prisma.BookingsUpdateManyWithoutExperiencesNestedInput
}

export type ExperiencesUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  image?: Prisma.StringFieldUpdateOperationsInput | string
  slot?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  bookings?: Prisma.BookingsUncheckedUpdateManyWithoutExperiencesNestedInput
}

export type ExperiencesCreateManyInput = {
  id?: string
  destination: string
  location: string
  description: string
  price: number
  image: string
  slot: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ExperiencesUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  image?: Prisma.StringFieldUpdateOperationsInput | string
  slot?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ExperiencesUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  image?: Prisma.StringFieldUpdateOperationsInput | string
  slot?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ExperiencesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  destination?: Prisma.SortOrder
  location?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  image?: Prisma.SortOrder
  slot?: Prisma.SortOrder
}

export type ExperiencesAvgOrderByAggregateInput = {
  price?: Prisma.SortOrder
}

export type ExperiencesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  destination?: Prisma.SortOrder
  location?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  image?: Prisma.SortOrder
}

export type ExperiencesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  destination?: Prisma.SortOrder
  location?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  image?: Prisma.SortOrder
}

export type ExperiencesSumOrderByAggregateInput = {
  price?: Prisma.SortOrder
}

export type ExperiencesScalarRelationFilter = {
  is?: Prisma.ExperiencesWhereInput
  isNot?: Prisma.ExperiencesWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ExperiencesCreateNestedOneWithoutBookingsInput = {
  create?: Prisma.XOR<Prisma.ExperiencesCreateWithoutBookingsInput, Prisma.ExperiencesUncheckedCreateWithoutBookingsInput>
  connectOrCreate?: Prisma.ExperiencesCreateOrConnectWithoutBookingsInput
  connect?: Prisma.ExperiencesWhereUniqueInput
}

export type ExperiencesUpdateOneRequiredWithoutBookingsNestedInput = {
  create?: Prisma.XOR<Prisma.ExperiencesCreateWithoutBookingsInput, Prisma.ExperiencesUncheckedCreateWithoutBookingsInput>
  connectOrCreate?: Prisma.ExperiencesCreateOrConnectWithoutBookingsInput
  upsert?: Prisma.ExperiencesUpsertWithoutBookingsInput
  connect?: Prisma.ExperiencesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ExperiencesUpdateToOneWithWhereWithoutBookingsInput, Prisma.ExperiencesUpdateWithoutBookingsInput>, Prisma.ExperiencesUncheckedUpdateWithoutBookingsInput>
}

export type ExperiencesCreateWithoutBookingsInput = {
  id?: string
  destination: string
  location: string
  description: string
  price: number
  image: string
  slot: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ExperiencesUncheckedCreateWithoutBookingsInput = {
  id?: string
  destination: string
  location: string
  description: string
  price: number
  image: string
  slot: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ExperiencesCreateOrConnectWithoutBookingsInput = {
  where: Prisma.ExperiencesWhereUniqueInput
  create: Prisma.XOR<Prisma.ExperiencesCreateWithoutBookingsInput, Prisma.ExperiencesUncheckedCreateWithoutBookingsInput>
}

export type ExperiencesUpsertWithoutBookingsInput = {
  update: Prisma.XOR<Prisma.ExperiencesUpdateWithoutBookingsInput, Prisma.ExperiencesUncheckedUpdateWithoutBookingsInput>
  create: Prisma.XOR<Prisma.ExperiencesCreateWithoutBookingsInput, Prisma.ExperiencesUncheckedCreateWithoutBookingsInput>
  where?: Prisma.ExperiencesWhereInput
}

export type ExperiencesUpdateToOneWithWhereWithoutBookingsInput = {
  where?: Prisma.ExperiencesWhereInput
  data: Prisma.XOR<Prisma.ExperiencesUpdateWithoutBookingsInput, Prisma.ExperiencesUncheckedUpdateWithoutBookingsInput>
}

export type ExperiencesUpdateWithoutBookingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  image?: Prisma.StringFieldUpdateOperationsInput | string
  slot?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ExperiencesUncheckedUpdateWithoutBookingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  image?: Prisma.StringFieldUpdateOperationsInput | string
  slot?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}


/**
 * Count Type ExperiencesCountOutputType
 */

export type ExperiencesCountOutputType = {
  bookings: number
}

export type ExperiencesCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  bookings?: boolean | ExperiencesCountOutputTypeCountBookingsArgs
}

/**
 * ExperiencesCountOutputType without action
 */
export type ExperiencesCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExperiencesCountOutputType
   */
  select?: Prisma.ExperiencesCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ExperiencesCountOutputType without action
 */
export type ExperiencesCountOutputTypeCountBookingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BookingsWhereInput
}


export type ExperiencesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  destination?: boolean
  location?: boolean
  description?: boolean
  price?: boolean
  image?: boolean
  slot?: boolean
  bookings?: boolean | Prisma.Experiences$bookingsArgs<ExtArgs>
  _count?: boolean | Prisma.ExperiencesCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["experiences"]>

export type ExperiencesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  destination?: boolean
  location?: boolean
  description?: boolean
  price?: boolean
  image?: boolean
  slot?: boolean
}, ExtArgs["result"]["experiences"]>

export type ExperiencesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  destination?: boolean
  location?: boolean
  description?: boolean
  price?: boolean
  image?: boolean
  slot?: boolean
}, ExtArgs["result"]["experiences"]>

export type ExperiencesSelectScalar = {
  id?: boolean
  destination?: boolean
  location?: boolean
  description?: boolean
  price?: boolean
  image?: boolean
  slot?: boolean
}

export type ExperiencesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "destination" | "location" | "description" | "price" | "image" | "slot", ExtArgs["result"]["experiences"]>
export type ExperiencesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  bookings?: boolean | Prisma.Experiences$bookingsArgs<ExtArgs>
  _count?: boolean | Prisma.ExperiencesCountOutputTypeDefaultArgs<ExtArgs>
}
export type ExperiencesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ExperiencesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ExperiencesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Experiences"
  objects: {
    bookings: Prisma.$BookingsPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    destination: string
    location: string
    description: string
    price: number
    image: string
    slot: runtime.JsonValue
  }, ExtArgs["result"]["experiences"]>
  composites: {}
}

export type ExperiencesGetPayload<S extends boolean | null | undefined | ExperiencesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExperiencesPayload, S>

export type ExperiencesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExperiencesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExperiencesCountAggregateInputType | true
  }

export interface ExperiencesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Experiences'], meta: { name: 'Experiences' } }
  /**
   * Find zero or one Experiences that matches the filter.
   * @param {ExperiencesFindUniqueArgs} args - Arguments to find a Experiences
   * @example
   * // Get one Experiences
   * const experiences = await prisma.experiences.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExperiencesFindUniqueArgs>(args: Prisma.SelectSubset<T, ExperiencesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExperiencesClient<runtime.Types.Result.GetResult<Prisma.$ExperiencesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Experiences that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExperiencesFindUniqueOrThrowArgs} args - Arguments to find a Experiences
   * @example
   * // Get one Experiences
   * const experiences = await prisma.experiences.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExperiencesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExperiencesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExperiencesClient<runtime.Types.Result.GetResult<Prisma.$ExperiencesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Experiences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperiencesFindFirstArgs} args - Arguments to find a Experiences
   * @example
   * // Get one Experiences
   * const experiences = await prisma.experiences.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExperiencesFindFirstArgs>(args?: Prisma.SelectSubset<T, ExperiencesFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExperiencesClient<runtime.Types.Result.GetResult<Prisma.$ExperiencesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Experiences that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperiencesFindFirstOrThrowArgs} args - Arguments to find a Experiences
   * @example
   * // Get one Experiences
   * const experiences = await prisma.experiences.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExperiencesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExperiencesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExperiencesClient<runtime.Types.Result.GetResult<Prisma.$ExperiencesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Experiences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperiencesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Experiences
   * const experiences = await prisma.experiences.findMany()
   * 
   * // Get first 10 Experiences
   * const experiences = await prisma.experiences.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const experiencesWithIdOnly = await prisma.experiences.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExperiencesFindManyArgs>(args?: Prisma.SelectSubset<T, ExperiencesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExperiencesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Experiences.
   * @param {ExperiencesCreateArgs} args - Arguments to create a Experiences.
   * @example
   * // Create one Experiences
   * const Experiences = await prisma.experiences.create({
   *   data: {
   *     // ... data to create a Experiences
   *   }
   * })
   * 
   */
  create<T extends ExperiencesCreateArgs>(args: Prisma.SelectSubset<T, ExperiencesCreateArgs<ExtArgs>>): Prisma.Prisma__ExperiencesClient<runtime.Types.Result.GetResult<Prisma.$ExperiencesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Experiences.
   * @param {ExperiencesCreateManyArgs} args - Arguments to create many Experiences.
   * @example
   * // Create many Experiences
   * const experiences = await prisma.experiences.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExperiencesCreateManyArgs>(args?: Prisma.SelectSubset<T, ExperiencesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Experiences and returns the data saved in the database.
   * @param {ExperiencesCreateManyAndReturnArgs} args - Arguments to create many Experiences.
   * @example
   * // Create many Experiences
   * const experiences = await prisma.experiences.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Experiences and only return the `id`
   * const experiencesWithIdOnly = await prisma.experiences.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExperiencesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExperiencesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExperiencesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Experiences.
   * @param {ExperiencesDeleteArgs} args - Arguments to delete one Experiences.
   * @example
   * // Delete one Experiences
   * const Experiences = await prisma.experiences.delete({
   *   where: {
   *     // ... filter to delete one Experiences
   *   }
   * })
   * 
   */
  delete<T extends ExperiencesDeleteArgs>(args: Prisma.SelectSubset<T, ExperiencesDeleteArgs<ExtArgs>>): Prisma.Prisma__ExperiencesClient<runtime.Types.Result.GetResult<Prisma.$ExperiencesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Experiences.
   * @param {ExperiencesUpdateArgs} args - Arguments to update one Experiences.
   * @example
   * // Update one Experiences
   * const experiences = await prisma.experiences.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExperiencesUpdateArgs>(args: Prisma.SelectSubset<T, ExperiencesUpdateArgs<ExtArgs>>): Prisma.Prisma__ExperiencesClient<runtime.Types.Result.GetResult<Prisma.$ExperiencesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Experiences.
   * @param {ExperiencesDeleteManyArgs} args - Arguments to filter Experiences to delete.
   * @example
   * // Delete a few Experiences
   * const { count } = await prisma.experiences.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExperiencesDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExperiencesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Experiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperiencesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Experiences
   * const experiences = await prisma.experiences.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExperiencesUpdateManyArgs>(args: Prisma.SelectSubset<T, ExperiencesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Experiences and returns the data updated in the database.
   * @param {ExperiencesUpdateManyAndReturnArgs} args - Arguments to update many Experiences.
   * @example
   * // Update many Experiences
   * const experiences = await prisma.experiences.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Experiences and only return the `id`
   * const experiencesWithIdOnly = await prisma.experiences.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExperiencesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExperiencesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExperiencesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Experiences.
   * @param {ExperiencesUpsertArgs} args - Arguments to update or create a Experiences.
   * @example
   * // Update or create a Experiences
   * const experiences = await prisma.experiences.upsert({
   *   create: {
   *     // ... data to create a Experiences
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Experiences we want to update
   *   }
   * })
   */
  upsert<T extends ExperiencesUpsertArgs>(args: Prisma.SelectSubset<T, ExperiencesUpsertArgs<ExtArgs>>): Prisma.Prisma__ExperiencesClient<runtime.Types.Result.GetResult<Prisma.$ExperiencesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Experiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperiencesCountArgs} args - Arguments to filter Experiences to count.
   * @example
   * // Count the number of Experiences
   * const count = await prisma.experiences.count({
   *   where: {
   *     // ... the filter for the Experiences we want to count
   *   }
   * })
  **/
  count<T extends ExperiencesCountArgs>(
    args?: Prisma.Subset<T, ExperiencesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExperiencesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Experiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperiencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExperiencesAggregateArgs>(args: Prisma.Subset<T, ExperiencesAggregateArgs>): Prisma.PrismaPromise<GetExperiencesAggregateType<T>>

  /**
   * Group by Experiences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExperiencesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExperiencesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExperiencesGroupByArgs['orderBy'] }
      : { orderBy?: ExperiencesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExperiencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExperiencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Experiences model
 */
readonly fields: ExperiencesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Experiences.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExperiencesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  bookings<T extends Prisma.Experiences$bookingsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Experiences$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BookingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Experiences model
 */
export interface ExperiencesFieldRefs {
  readonly id: Prisma.FieldRef<"Experiences", 'String'>
  readonly destination: Prisma.FieldRef<"Experiences", 'String'>
  readonly location: Prisma.FieldRef<"Experiences", 'String'>
  readonly description: Prisma.FieldRef<"Experiences", 'String'>
  readonly price: Prisma.FieldRef<"Experiences", 'Float'>
  readonly image: Prisma.FieldRef<"Experiences", 'String'>
  readonly slot: Prisma.FieldRef<"Experiences", 'Json'>
}
    

// Custom InputTypes
/**
 * Experiences findUnique
 */
export type ExperiencesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experiences
   */
  select?: Prisma.ExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experiences
   */
  omit?: Prisma.ExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which Experiences to fetch.
   */
  where: Prisma.ExperiencesWhereUniqueInput
}

/**
 * Experiences findUniqueOrThrow
 */
export type ExperiencesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experiences
   */
  select?: Prisma.ExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experiences
   */
  omit?: Prisma.ExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which Experiences to fetch.
   */
  where: Prisma.ExperiencesWhereUniqueInput
}

/**
 * Experiences findFirst
 */
export type ExperiencesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experiences
   */
  select?: Prisma.ExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experiences
   */
  omit?: Prisma.ExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which Experiences to fetch.
   */
  where?: Prisma.ExperiencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Experiences to fetch.
   */
  orderBy?: Prisma.ExperiencesOrderByWithRelationInput | Prisma.ExperiencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Experiences.
   */
  cursor?: Prisma.ExperiencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Experiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Experiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Experiences.
   */
  distinct?: Prisma.ExperiencesScalarFieldEnum | Prisma.ExperiencesScalarFieldEnum[]
}

/**
 * Experiences findFirstOrThrow
 */
export type ExperiencesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experiences
   */
  select?: Prisma.ExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experiences
   */
  omit?: Prisma.ExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which Experiences to fetch.
   */
  where?: Prisma.ExperiencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Experiences to fetch.
   */
  orderBy?: Prisma.ExperiencesOrderByWithRelationInput | Prisma.ExperiencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Experiences.
   */
  cursor?: Prisma.ExperiencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Experiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Experiences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Experiences.
   */
  distinct?: Prisma.ExperiencesScalarFieldEnum | Prisma.ExperiencesScalarFieldEnum[]
}

/**
 * Experiences findMany
 */
export type ExperiencesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experiences
   */
  select?: Prisma.ExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experiences
   */
  omit?: Prisma.ExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperiencesInclude<ExtArgs> | null
  /**
   * Filter, which Experiences to fetch.
   */
  where?: Prisma.ExperiencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Experiences to fetch.
   */
  orderBy?: Prisma.ExperiencesOrderByWithRelationInput | Prisma.ExperiencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Experiences.
   */
  cursor?: Prisma.ExperiencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Experiences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Experiences.
   */
  skip?: number
  distinct?: Prisma.ExperiencesScalarFieldEnum | Prisma.ExperiencesScalarFieldEnum[]
}

/**
 * Experiences create
 */
export type ExperiencesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experiences
   */
  select?: Prisma.ExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experiences
   */
  omit?: Prisma.ExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperiencesInclude<ExtArgs> | null
  /**
   * The data needed to create a Experiences.
   */
  data: Prisma.XOR<Prisma.ExperiencesCreateInput, Prisma.ExperiencesUncheckedCreateInput>
}

/**
 * Experiences createMany
 */
export type ExperiencesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Experiences.
   */
  data: Prisma.ExperiencesCreateManyInput | Prisma.ExperiencesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Experiences createManyAndReturn
 */
export type ExperiencesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experiences
   */
  select?: Prisma.ExperiencesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Experiences
   */
  omit?: Prisma.ExperiencesOmit<ExtArgs> | null
  /**
   * The data used to create many Experiences.
   */
  data: Prisma.ExperiencesCreateManyInput | Prisma.ExperiencesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Experiences update
 */
export type ExperiencesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experiences
   */
  select?: Prisma.ExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experiences
   */
  omit?: Prisma.ExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperiencesInclude<ExtArgs> | null
  /**
   * The data needed to update a Experiences.
   */
  data: Prisma.XOR<Prisma.ExperiencesUpdateInput, Prisma.ExperiencesUncheckedUpdateInput>
  /**
   * Choose, which Experiences to update.
   */
  where: Prisma.ExperiencesWhereUniqueInput
}

/**
 * Experiences updateMany
 */
export type ExperiencesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Experiences.
   */
  data: Prisma.XOR<Prisma.ExperiencesUpdateManyMutationInput, Prisma.ExperiencesUncheckedUpdateManyInput>
  /**
   * Filter which Experiences to update
   */
  where?: Prisma.ExperiencesWhereInput
  /**
   * Limit how many Experiences to update.
   */
  limit?: number
}

/**
 * Experiences updateManyAndReturn
 */
export type ExperiencesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experiences
   */
  select?: Prisma.ExperiencesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Experiences
   */
  omit?: Prisma.ExperiencesOmit<ExtArgs> | null
  /**
   * The data used to update Experiences.
   */
  data: Prisma.XOR<Prisma.ExperiencesUpdateManyMutationInput, Prisma.ExperiencesUncheckedUpdateManyInput>
  /**
   * Filter which Experiences to update
   */
  where?: Prisma.ExperiencesWhereInput
  /**
   * Limit how many Experiences to update.
   */
  limit?: number
}

/**
 * Experiences upsert
 */
export type ExperiencesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experiences
   */
  select?: Prisma.ExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experiences
   */
  omit?: Prisma.ExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperiencesInclude<ExtArgs> | null
  /**
   * The filter to search for the Experiences to update in case it exists.
   */
  where: Prisma.ExperiencesWhereUniqueInput
  /**
   * In case the Experiences found by the `where` argument doesn't exist, create a new Experiences with this data.
   */
  create: Prisma.XOR<Prisma.ExperiencesCreateInput, Prisma.ExperiencesUncheckedCreateInput>
  /**
   * In case the Experiences was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExperiencesUpdateInput, Prisma.ExperiencesUncheckedUpdateInput>
}

/**
 * Experiences delete
 */
export type ExperiencesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experiences
   */
  select?: Prisma.ExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experiences
   */
  omit?: Prisma.ExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperiencesInclude<ExtArgs> | null
  /**
   * Filter which Experiences to delete.
   */
  where: Prisma.ExperiencesWhereUniqueInput
}

/**
 * Experiences deleteMany
 */
export type ExperiencesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Experiences to delete
   */
  where?: Prisma.ExperiencesWhereInput
  /**
   * Limit how many Experiences to delete.
   */
  limit?: number
}

/**
 * Experiences.bookings
 */
export type Experiences$bookingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bookings
   */
  select?: Prisma.BookingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bookings
   */
  omit?: Prisma.BookingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingsInclude<ExtArgs> | null
  where?: Prisma.BookingsWhereInput
  orderBy?: Prisma.BookingsOrderByWithRelationInput | Prisma.BookingsOrderByWithRelationInput[]
  cursor?: Prisma.BookingsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BookingsScalarFieldEnum | Prisma.BookingsScalarFieldEnum[]
}

/**
 * Experiences without action
 */
export type ExperiencesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Experiences
   */
  select?: Prisma.ExperiencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Experiences
   */
  omit?: Prisma.ExperiencesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExperiencesInclude<ExtArgs> | null
}
